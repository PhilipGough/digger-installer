---

-
  name: Check if ruby_domain_name gem is already installed
  shell: "gem list -i '^domain_name$'"
  args:
    executable: /bin/bash
  changed_when: False
  failed_when: ruby_domain_name_installed.stderr and 'command not found' in ruby_domain_name_installed.stderr
  register: ruby_domain_name_installed

-
  name: Copy ruby_domain_name gem to remote host
  copy:
     src: "{{ruby_domain_name_file_path}}"
     dest: "{{remote_tmp_dir}}/{{ruby_domain_name_gem_name}}"
     mode: 0755
  when: ruby_domain_name_installed.rc != 0

-
  name: Install ruby_domain_name gem
  shell: "gem install {{remote_tmp_dir}}/{{ruby_domain_name_gem_name}}"
  args:
    executable: /bin/bash
  become: yes
  when: ruby_domain_name_installed.rc != 0

-
  name: Install xcode-install gem package
  shell: "gem install --conservative --no-ri --no-rdoc xcode-install -v {{ xcode_install_version | default('\"\"') }}"
  args:
    executable: /bin/bash
  become: yes
  environment:
    http_proxy: "{{ proxy_url | default('') }}"
    https_proxy: "{{ proxy_url | default('') }}"

-
  name: Get xcversion binary path
  shell: source ~/.bash_profile && which xcversion
  register: xcversion_bin
  failed_when: xcversion_bin.rc != 0

-
  name: Install command line tools
  shell: "{{ xcversion_bin.stdout }} install-cli-tools"
  args:
    executable: /bin/bash
  become: yes
  register: xcode_cli_tools_install
  when: xcode_install_user is defined and xcode_install_password is defined
  failed_when: xcode_cli_tools_install.rc != 0 and xcode_cli_tools_install.stdout.find('already installed') == -1
  changed_when: xcode_cli_tools_install.stdout.find('already installed') == -1

-
  name: Get list of available xcode versions
  command: "{{ xcversion_bin.stdout }} list"
  register: xcode_available_status
  changed_when: False

-
  name: Update cached xcode version for user
  command: "{{ xcversion_bin.stdout }} update"

- debug:
    msg: "Installing Xcode ({{ xcode_versions | join(', ') }}). This may take over 30 minutes for each version. Please be patient."

# Check here for versions already installed
-
  name: Install xcode versions
  shell: "{{ xcversion_bin.stdout }} install {{ item }}"
  args:
    executable: /bin/bash
  with_items: "{{ xcode_versions }}"
  when: xcode_install_user is defined and xcode_install_password is defined
  register: xcode_install
  failed_when: (xcode_install.rc != 0 and xcode_install.stdout.find('already installed') == -1) or xcode_install.stderr.find('The specified Apple developer account credentials are incorrect.') != -1
  changed_when: xcode_install.stdout.find('already installed') == -1
  become: yes
  environment:
    XCODE_INSTALL_USER: "{{ xcode_install_user }}"
    XCODE_INSTALL_PASSWORD: "{{ xcode_install_password }}"

-
  name: Check xcode symlink
  stat:
    path: /Applications/Xcode.app
  register: xcode_symlink

-
  name: Set default xcode symlink path
  set_fact:
    xcode_symlink_path: "/Applications/Xcode-{{ xcode_default_version }}.app"

-
  name: Set default xcode symlink
  file:
    state: link
    src: "/Applications/Xcode-{{ xcode_default_version }}.app"
    dest: /Applications/Xcode.app
  when: xcode_symlink.stat.exists == False or xcode_symlink.stat.lnk_source != xcode_symlink_path
